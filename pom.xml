<?xml version="1.0" encoding="UTF-8"?>
<project
        xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                        http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <!-- Project Coordinates -->
    <groupId>io.armadaproject.armada</groupId>
    <artifactId>armada-cluster-manager_2.13</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>External Cluster Manager Extension</name>
    <description>
        A plugin JAR that extends Spark’s ExternalClusterManager using Java’s Service Provider Interface (SPI) with an ArmadaClusterManager implementation.
    </description>

    <!-- Global Properties -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- Set your desired Java version -->
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <!-- configure Scala version -->
        <scala.major.version>2</scala.major.version>
        <scala.minor.version>13</scala.minor.version>
        <scala.patch.version>8</scala.patch.version>
        <scala.binary.version>${scala.major.version}.${scala.minor.version}</scala.binary.version>
        <scala.version>${scala.binary.version}.${scala.patch.version}</scala.version>
        <!-- configure Spark version -->
        <spark.major.version>3</spark.major.version>
        <spark.minor.version>5</spark.minor.version>
        <spark.patch.version>3</spark.patch.version>
        <spark.binary.version>${spark.major.version}.${spark.minor.version}</spark.binary.version>
        <spark.version>${spark.binary.version}.${spark.patch.version}</spark.version>
        <spotless.version>2.44.4</spotless.version>
        <scalafmt.version>3.9.5</scalafmt.version>

        <kubernetes-client.version>7.1.0</kubernetes-client.version>
        <scalatest-maven-plugin.version>2.2.0</scalatest-maven-plugin.version>
        <!-- SPARK-36796 for JDK-17 test-->
        <extraJavaTestArgs>
          -XX:+IgnoreUnrecognizedVMOptions
          --add-opens=java.base/java.lang=ALL-UNNAMED
          --add-opens=java.base/java.lang.invoke=ALL-UNNAMED
          --add-opens=java.base/java.lang.reflect=ALL-UNNAMED
          --add-opens=java.base/java.io=ALL-UNNAMED
          --add-opens=java.base/java.net=ALL-UNNAMED
          --add-opens=java.base/java.nio=ALL-UNNAMED
          --add-opens=java.base/java.util=ALL-UNNAMED
          --add-opens=java.base/java.util.concurrent=ALL-UNNAMED
          --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED
          --add-opens=java.base/jdk.internal.ref=ALL-UNNAMED
          --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
          --add-opens=java.base/sun.nio.cs=ALL-UNNAMED
          --add-opens=java.base/sun.security.action=ALL-UNNAMED
          --add-opens=java.base/sun.util.calendar=ALL-UNNAMED
          -Djdk.reflect.useDirectMethodHandle=false
        </extraJavaTestArgs>
    </properties>

    <repositories>
      <repository>
        <id>gcs-maven-central-mirror</id>
        <!--
            Google Mirror of Maven Central, placed first so that it's used instead of flaky Maven Central.
            See https://storage-download.googleapis.com/maven-central/index.html
        -->
        <name>GCS Maven Central mirror</name>
        <url>https://maven-central.storage-download.googleapis.com/maven2/</url>
        <releases>
          <enabled>true</enabled>
        </releases>
        <snapshots>
          <enabled>true</enabled>
        </snapshots>
      </repository>
      <repository>
        <!--
            This is where Apache publishes snapshots.
        -->
        <id>apache-snapshots</id>
        <name>apache-snapshots</name>
        <url>https://repository.apache.org/content/repositories/snapshots</url>
        <releases>
          <enabled>false</enabled>
        </releases>
        <snapshots>
          <enabled>true</enabled>
        </snapshots>
      </repository>
      <repository>
        <!--
            This is used as a fallback when the first try fails.
        -->
        <id>central</id>
        <name>Maven Repository</name>
        <url>https://repo.maven.apache.org/maven2</url>
        <releases>
          <enabled>true</enabled>
        </releases>
        <snapshots>
          <enabled>false</enabled>
        </snapshots>
      </repository>
      <repository>
          <!--
              This is where Armada (and Apache) publishes snapshots.
          -->
        <id>central-portal-snapshots</id>
        <name>Central Portal Snapshots</name>
        <url>https://central.sonatype.com/repository/maven-snapshots/</url>
        <releases>
          <enabled>false</enabled>
        </releases>
        <snapshots>
          <enabled>true</enabled>
        </snapshots>
      </repository>
    </repositories>
    <dependencies>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.binary.version}</artifactId>
            <version>${spark.version}</version>
            <scope>provided</scope>
            <exclusions>
                <!-- The Armada Scala client transitively depends on io.netty -->
                <!-- Spark also depends on io.netty, so it might pull in versions that supersedes those Armada Scala dependencies -->
                <!-- We need to exclude the Spark netty dependencies (which are scope provided), otherwise our shaded jar misses netty -->
                <exclusion>
                    <groupId>io.netty</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
          <groupId>io.armadaproject</groupId>
          <artifactId>armada-scala-client_${scala.binary.version}</artifactId>
          <version>0.1.0</version>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
          <groupId>org.scalatest</groupId>
          <artifactId>scalatest_${scala.binary.version}</artifactId>
          <version>3.2.16</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.scalatestplus</groupId>
          <artifactId>scalacheck-1-18_${scala.binary.version}</artifactId>
          <version>3.2.19.0</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.scalatestplus</groupId>
          <artifactId>mockito-5-12_${scala.binary.version}</artifactId>
          <version>3.2.19.0</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
          <version>2.15.2</version>
        </dependency>
        <dependency>
          <groupId>com.fasterxml.jackson.dataformat</groupId>
          <artifactId>jackson-dataformat-yaml</artifactId>
          <version>2.15.2</version>
        </dependency>
        <dependency>
          <groupId>com.fasterxml.jackson.module</groupId>
          <artifactId>jackson-module-scala_${scala.binary.version}</artifactId>
          <version>2.15.2</version>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>spark-4</id>
            <activation>
                <property>
                    <name>spark.major.version</name>
                    <value>4</value>
                </property>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.apache.spark</groupId>
                    <artifactId>spark-common-utils_${scala.binary.version}</artifactId>
                    <version>${spark.version}</version>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
        </profile>
    </profiles>

    <!-- Build Plugins -->
    <build>
        <plugins>
            <plugin>
                <groupId>com.diffplug.spotless</groupId>
                <artifactId>spotless-maven-plugin</artifactId>
                <version>${spotless.version}</version>
                <configuration>
                    <scala>
                        <scalafmt>
                            <version>${scalafmt.version}</version>
                            <file>${project.basedir}/.scalafmt.conf</file>
                            <scalaMajorVersion>${scala.binary.version}</scalaMajorVersion>
                        </scalafmt>
                    </scala>
                </configuration>
            </plugin>
            <!-- Include Spark version specific sources -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.5.0</version>
                <executions>
                    <execution>
                        <id>spark-version-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/main/scala-spark-${spark.binary.version}</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Compiler Plugins -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>4.9.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- Optional: specify your Scala version -->
                    <scalaVersion>${scala.version}</scalaVersion>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>

            <!-- Jar Plugin -->
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.4.2</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <!-- Fatjar and dependency shading Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.6.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <minimizeJar>false</minimizeJar>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                            </transformers>
                            <artifactSet>
                                <includes>
                                    <include>io.armadaproject:armada-scala-client_${scala.binary.version}</include>
                                    <include>com.google.android:annotations</include>
                                    <include>com.google.api.grpc:proto-google-common-protos</include>
                                    <include>com.google.code.findbugs:jsr305</include>
                                    <include>com.google.code.gson:gson</include>
                                    <include>com.google.errorprone:error_prone_annotations</include>
                                    <include>com.google.guava:*</include>
                                    <include>com.google.j2objc:j2objc-annotations</include>
                                    <include>com.google.protobuf:protobuf-java</include>
                                    <include>com.thesamet.scalapb:*</include>
                                    <include>io.grpc:*</include>
                                    <include>io.netty:*</include>
                                    <include>io.perfmark:perfmark-api</include>
                                    <include>org.checkerframework:checker-qual</include>
                                    <include>org.checkerframework:checker-compat-qual</include>
                                    <include>org.codehaus.mojo:animal-sniffer-annotations</include>
                                    <include>com.fasterxml.jackson.core:*</include>
                                    <include>com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</include>
                                    <include>com.fasterxml.jackson.module:jackson-module-scala_${scala.binary.version}</include>
                                    <include>com.thoughtworks.paranamer:paranamer</include>
                                    <include>org.yaml:snakeyaml</include>
                                </includes>
                            </artifactSet>
                            <relocations>
                                <relocation>
                                    <pattern>android.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.android.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>com.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.com.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>google.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.google.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>io.grpc.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.io.grpc.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>io.netty.bootstrap.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.io.netty.bootstrap.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>io.netty.buffer.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.io.netty.buffer.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>io.netty.channel.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.io.netty.channel.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>io.netty.handler.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.io.netty.handler.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>io.netty.util.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.io.netty.util.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>io.perfmark.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.io.perfmark.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>javax.annotation.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.javax.annotation.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>org.checkerframework.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.org.checkerframework.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>org.codehaus.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.org.codehaus.</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>scalapb.</pattern>
                                    <shadedPattern>io.armadaproject.shaded.scalapb.</shadedPattern>
                                </relocation>
                            </relocations>
                            <filters>
                                <filter>
                                    <artifact>com.thesamet.scalapb:*</artifact>
                                    <excludes>
                                        <!-- armada-scala-client provides our own Scala protobuf classes -->
                                        <exclude>com/google/protobuf/**</exclude>
                                    </excludes>
                                </filter>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/io.netty.versions.properties</exclude>
                                        <exclude>META-INF/MANIFEST.MF</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>all</shadedClassifierName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Scalatest runs unit tests only, excludes E2E tests -->
            <plugin>
              <groupId>org.scalatest</groupId>
              <artifactId>scalatest-maven-plugin</artifactId>
              <version>${scalatest-maven-plugin.version}</version>
              <configuration>
                <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                <junitxml>.</junitxml>
                <filereports>SparkTestSuite.txt</filereports>
                <argLine>-ea -Xmx4g -Xss4m -XX:MaxMetaspaceSize=2g ${extraJavaTestArgs} -Dio.netty.tryReflectionSetAccessible=true</argLine>
                <stderr/>
              </configuration>
              <executions>
                <execution>
                  <id>test</id>
                  <goals>
                    <goal>test</goal>
                  </goals>
                  <configuration>
                    <!-- Exclude E2E test classes by name pattern -->
                    <suffixes>(?&lt;!E2E)Suite</suffixes>
                  </configuration>
                </execution>
              </executions>
            </plugin>
        </plugins>
    </build>
</project>
